{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = 'https://backendtesting-production-dcfc.up.railway.app';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE,\n  timeout: 10000,\n  // 10 second timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  var _localStorage$getItem;\n  // Check for token in multiple possible storage keys\n  const token = localStorage.getItem('access_token') || localStorage.getItem('token') || ((_localStorage$getItem = localStorage.getItem('user')) === null || _localStorage$getItem === void 0 ? void 0 : _localStorage$getItem.token);\n\n  // Check if this is a mock user (local authentication)\n  const userData = localStorage.getItem('user_data');\n  let isMockUser = false;\n  if (userData) {\n    try {\n      var _user$token;\n      const user = JSON.parse(userData);\n      isMockUser = user.isMockUser || ((_user$token = user.token) === null || _user$token === void 0 ? void 0 : _user$token.startsWith('mock_token_'));\n    } catch (e) {\n      // Ignore parsing errors\n    }\n  }\n\n  // For cart operations with mock users, we should not make API calls\n  if (isMockUser && config.url && config.url.includes('/api/cart/')) {\n    console.log('Mock user detected for cart operation - this should be handled by the cart API functions');\n    // We'll let the cart API functions handle this\n  }\n  if (token && !isMockUser) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('Adding auth token to request:', token.substring(0, 20) + '...');\n  } else if (isMockUser) {\n    console.log('Mock user detected - skipping API call for:', config.url);\n    // For mock users, we'll handle this in the response interceptor\n  } else {\n    console.log('No auth token found for request');\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2;\n  const originalRequest = error.config;\n\n  // Check if this is a mock user\n  const userData = localStorage.getItem('user_data');\n  let isMockUser = false;\n  if (userData) {\n    try {\n      var _user$token2;\n      const user = JSON.parse(userData);\n      isMockUser = user.isMockUser || ((_user$token2 = user.token) === null || _user$token2 === void 0 ? void 0 : _user$token2.startsWith('mock_token_'));\n    } catch (e) {\n      // Ignore parsing errors\n    }\n  }\n\n  // For mock users, handle API calls locally\n  if (isMockUser && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.log('Mock user detected - handling API call locally');\n\n    // Handle different API endpoints for mock users\n    const url = originalRequest.url;\n    if (url.includes('/api/auth/profile/update/')) {\n      // Mock profile update response\n      const mockResponse = {\n        data: {\n          user: JSON.parse(localStorage.getItem('user_data')),\n          message: 'Profile updated successfully'\n        },\n        status: 200,\n        statusText: 'OK'\n      };\n      return Promise.resolve(mockResponse);\n    }\n    if (url.includes('/api/cart/')) {\n      // Mock cart response\n      const cartData = localStorage.getItem('cart') || '{\"items\": []}';\n      const mockResponse = {\n        data: JSON.parse(cartData),\n        status: 200,\n        statusText: 'OK'\n      };\n      return Promise.resolve(mockResponse);\n    }\n\n    // For other endpoints, return empty success response\n    return Promise.resolve({\n      data: {},\n      status: 200,\n      statusText: 'OK'\n    });\n  }\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    console.log('401 error, attempting token refresh...');\n    try {\n      // Check for refresh token in multiple possible storage keys\n      const refreshToken = localStorage.getItem('refresh_token') || localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        const response = await axios.post(`${API_BASE}/api/auth/token/refresh/`, {\n          refresh: refreshToken\n        });\n        const {\n          access\n        } = response.data;\n        localStorage.setItem('access_token', access);\n        originalRequest.headers.Authorization = `Bearer ${access}`;\n        console.log('Token refreshed successfully');\n        return api(originalRequest);\n      } else {\n        console.log('No refresh token found');\n      }\n    } catch (refreshError) {\n      console.log('Token refresh failed:', refreshError);\n      // Refresh token failed, clear tokens but don't redirect immediately\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('refreshToken');\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: async credentials => {\n    try {\n      // The backend expects 'email' field, not 'username'\n      const loginData = {\n        email: credentials.username || credentials.email,\n        // Handle both username and email fields\n        password: credentials.password\n      };\n      return await api.post('/api/auth/login/', loginData);\n    } catch (error) {\n      console.error('Login API error:', error);\n      // Instead of throwing, indicate backend is unavailable\n      throw new Error('BACKEND_UNAVAILABLE');\n    }\n  },\n  register: async userData => {\n    try {\n      // The backend uses 'registration' endpoint, not 'signup'\n      return await api.post('/api/auth/registration/', userData);\n    } catch (error) {\n      console.error('Register API error:', error);\n      // Instead of throwing, indicate backend is unavailable\n      throw new Error('BACKEND_UNAVAILABLE');\n    }\n  },\n  refreshToken: refresh => api.post('/api/auth/token/refresh/', {\n    refresh\n  }),\n  getProfile: () => {\n    // Check if user is mock user\n    const userData = localStorage.getItem('user_data');\n    if (userData) {\n      try {\n        var _user$token3;\n        const user = JSON.parse(userData);\n        if (user.isMockUser || (_user$token3 = user.token) !== null && _user$token3 !== void 0 && _user$token3.startsWith('mock_token_')) {\n          // Return mock profile data\n          return Promise.resolve({\n            data: user\n          });\n        }\n      } catch (e) {\n        // Continue with API call if parsing fails\n      }\n    }\n    return api.get('/api/auth/profile/');\n  },\n  updateProfile: profileData => {\n    // Check if user is mock user\n    const userData = localStorage.getItem('user_data');\n    if (userData) {\n      try {\n        var _user$token4;\n        const user = JSON.parse(userData);\n        if (user.isMockUser || (_user$token4 = user.token) !== null && _user$token4 !== void 0 && _user$token4.startsWith('mock_token_')) {\n          // Return mock success response\n          return Promise.resolve({\n            data: {\n              user: {\n                ...user,\n                ...profileData\n              },\n              message: 'Profile updated successfully'\n            }\n          });\n        }\n      } catch (e) {\n        // Continue with API call if parsing fails\n      }\n    }\n    return api.post('/api/auth/profile/update/', profileData);\n  }\n};\n\n// Meals API\nexport const mealsAPI = {\n  getAll: (search = '') => api.get(`/api/meals/${search ? `?search=${search}` : ''}`),\n  getById: id => api.get(`/api/meals/${id}/`)\n};\n\n// Delivery API\nexport const deliveryAPI = {\n  getTypes: () => api.get('/api/delivery-types/'),\n  getLocations: () => api.get('/api/locations/')\n};\n\n// Cart API\nexport const cartAPI = {\n  get: async () => {\n    try {\n      // Check if user is mock user first\n      const userData = localStorage.getItem('user_data');\n      if (userData) {\n        try {\n          var _user$token5;\n          const user = JSON.parse(userData);\n          if (user.isMockUser || (_user$token5 = user.token) !== null && _user$token5 !== void 0 && _user$token5.startsWith('mock_token_')) {\n            console.log('Mock user detected - returning local cart data');\n            const cartData = localStorage.getItem('localCart') || '{\"items\": [], \"total_amount\": 0}';\n            return Promise.resolve({\n              data: JSON.parse(cartData)\n            });\n          }\n        } catch (e) {\n          // Continue with API call if parsing fails\n        }\n      }\n      return await api.get('/api/cart/');\n    } catch (error) {\n      console.error('Cart get API error:', error);\n      // Return mock cart data if API fails\n      const cartData = localStorage.getItem('localCart') || '{\"items\": [], \"total_amount\": 0}';\n      return Promise.resolve({\n        data: JSON.parse(cartData)\n      });\n    }\n  },\n  add: async item => {\n    try {\n      // Check if user is mock user first\n      const userData = localStorage.getItem('user_data');\n      if (userData) {\n        try {\n          var _user$token6;\n          const user = JSON.parse(userData);\n          if (user.isMockUser || (_user$token6 = user.token) !== null && _user$token6 !== void 0 && _user$token6.startsWith('mock_token_')) {\n            console.log('Mock user detected - skipping cart API call');\n            throw new Error('BACKEND_UNAVAILABLE');\n          }\n        } catch (e) {\n          // Continue with API call if parsing fails\n        }\n      }\n      return await api.post('/api/cart/', item);\n    } catch (error) {\n      console.error('Cart add API error:', error);\n      // Indicate backend is unavailable for cart operations\n      throw new Error('BACKEND_UNAVAILABLE');\n    }\n  },\n  update: async (itemId, item) => {\n    try {\n      // Check if user is mock user first\n      const userData = localStorage.getItem('user_data');\n      if (userData) {\n        try {\n          var _user$token7;\n          const user = JSON.parse(userData);\n          if (user.isMockUser || (_user$token7 = user.token) !== null && _user$token7 !== void 0 && _user$token7.startsWith('mock_token_')) {\n            console.log('Mock user detected - skipping cart API call');\n            throw new Error('BACKEND_UNAVAILABLE');\n          }\n        } catch (e) {\n          // Continue with API call if parsing fails\n        }\n      }\n      return await api.put(`/api/cart/${itemId}/`, item);\n    } catch (error) {\n      console.error('Cart update API error:', error);\n      // Indicate backend is unavailable for cart operations\n      throw new Error('BACKEND_UNAVAILABLE');\n    }\n  },\n  remove: async itemId => {\n    try {\n      // Check if user is mock user first\n      const userData = localStorage.getItem('user_data');\n      if (userData) {\n        try {\n          var _user$token8;\n          const user = JSON.parse(userData);\n          if (user.isMockUser || (_user$token8 = user.token) !== null && _user$token8 !== void 0 && _user$token8.startsWith('mock_token_')) {\n            console.log('Mock user detected - skipping cart API call');\n            throw new Error('BACKEND_UNAVAILABLE');\n          }\n        } catch (e) {\n          // Continue with API call if parsing fails\n        }\n      }\n      return await api.delete(`/api/cart/${itemId}/`);\n    } catch (error) {\n      console.error('Cart remove API error:', error);\n      // Indicate backend is unavailable for cart operations\n      throw new Error('BACKEND_UNAVAILABLE');\n    }\n  }\n};\n\n// Orders API\nexport const ordersAPI = {\n  getAll: () => api.get('/api/orders/'),\n  getById: id => api.get(`/api/orders/${id}/`),\n  create: order => api.post('/api/orders/', order)\n};\n\n// Dynamic Data Management\nexport const dynamicDataAPI = {\n  // Update sample meals dynamically (for when backend is not available)\n  updateSampleMeals: meals => {\n    localStorage.setItem('sampleMeals', JSON.stringify(meals));\n  },\n  // Get sample meals from localStorage\n  getSampleMeals: () => {\n    const stored = localStorage.getItem('sampleMeals');\n    return stored ? JSON.parse(stored) : null;\n  },\n  // Update delivery locations dynamically\n  updateDeliveryLocations: locations => {\n    localStorage.setItem('deliveryLocations', JSON.stringify(locations));\n  },\n  // Get delivery locations from localStorage\n  getDeliveryLocations: () => {\n    const stored = localStorage.getItem('deliveryLocations');\n    return stored ? JSON.parse(stored) : null;\n  },\n  // Update fees dynamically\n  updateFees: fees => {\n    localStorage.setItem('deliveryFees', JSON.stringify(fees));\n  },\n  // Get fees from localStorage\n  getFees: () => {\n    const stored = localStorage.getItem('deliveryFees');\n    return stored ? JSON.parse(stored) : null;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE","api","create","baseURL","timeout","headers","interceptors","request","use","config","_localStorage$getItem","token","localStorage","getItem","userData","isMockUser","_user$token","user","JSON","parse","startsWith","e","url","includes","console","log","Authorization","substring","error","Promise","reject","response","_error$response","_error$response2","originalRequest","_user$token2","status","mockResponse","data","message","statusText","resolve","cartData","_retry","refreshToken","post","refresh","access","setItem","refreshError","removeItem","authAPI","login","credentials","loginData","email","username","password","Error","register","getProfile","_user$token3","get","updateProfile","profileData","_user$token4","mealsAPI","getAll","search","getById","id","deliveryAPI","getTypes","getLocations","cartAPI","_user$token5","add","item","_user$token6","update","itemId","_user$token7","put","remove","_user$token8","delete","ordersAPI","order","dynamicDataAPI","updateSampleMeals","meals","stringify","getSampleMeals","stored","updateDeliveryLocations","locations","getDeliveryLocations","updateFees","fees","getFees"],"sources":["/Users/teslimadekoya/Desktop/frontend copy/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE = 'https://backendtesting-production-dcfc.up.railway.app';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE,\n  timeout: 10000, // 10 second timeout\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    // Check for token in multiple possible storage keys\n    const token = localStorage.getItem('access_token') || \n                  localStorage.getItem('token') || \n                  localStorage.getItem('user')?.token;\n    \n    // Check if this is a mock user (local authentication)\n    const userData = localStorage.getItem('user_data');\n    let isMockUser = false;\n    if (userData) {\n      try {\n        const user = JSON.parse(userData);\n        isMockUser = user.isMockUser || user.token?.startsWith('mock_token_');\n      } catch (e) {\n        // Ignore parsing errors\n      }\n    }\n    \n    // For cart operations with mock users, we should not make API calls\n    if (isMockUser && config.url && config.url.includes('/api/cart/')) {\n      console.log('Mock user detected for cart operation - this should be handled by the cart API functions');\n      // We'll let the cart API functions handle this\n    }\n    \n    if (token && !isMockUser) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('Adding auth token to request:', token.substring(0, 20) + '...');\n    } else if (isMockUser) {\n      console.log('Mock user detected - skipping API call for:', config.url);\n      // For mock users, we'll handle this in the response interceptor\n    } else {\n      console.log('No auth token found for request');\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    // Check if this is a mock user\n    const userData = localStorage.getItem('user_data');\n    let isMockUser = false;\n    if (userData) {\n      try {\n        const user = JSON.parse(userData);\n        isMockUser = user.isMockUser || user.token?.startsWith('mock_token_');\n      } catch (e) {\n        // Ignore parsing errors\n      }\n    }\n\n    // For mock users, handle API calls locally\n    if (isMockUser && error.response?.status === 401) {\n      console.log('Mock user detected - handling API call locally');\n      \n      // Handle different API endpoints for mock users\n      const url = originalRequest.url;\n      \n      if (url.includes('/api/auth/profile/update/')) {\n        // Mock profile update response\n        const mockResponse = {\n          data: {\n            user: JSON.parse(localStorage.getItem('user_data')),\n            message: 'Profile updated successfully'\n          },\n          status: 200,\n          statusText: 'OK'\n        };\n        return Promise.resolve(mockResponse);\n      }\n      \n      if (url.includes('/api/cart/')) {\n        // Mock cart response\n        const cartData = localStorage.getItem('cart') || '{\"items\": []}';\n        const mockResponse = {\n          data: JSON.parse(cartData),\n          status: 200,\n          statusText: 'OK'\n        };\n        return Promise.resolve(mockResponse);\n      }\n      \n      // For other endpoints, return empty success response\n      return Promise.resolve({\n        data: {},\n        status: 200,\n        statusText: 'OK'\n      });\n    }\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      console.log('401 error, attempting token refresh...');\n\n      try {\n        // Check for refresh token in multiple possible storage keys\n        const refreshToken = localStorage.getItem('refresh_token') || \n                           localStorage.getItem('refreshToken');\n        \n        if (refreshToken) {\n          const response = await axios.post(`${API_BASE}/api/auth/token/refresh/`, {\n            refresh: refreshToken,\n          });\n          \n          const { access } = response.data;\n          localStorage.setItem('access_token', access);\n          \n          originalRequest.headers.Authorization = `Bearer ${access}`;\n          console.log('Token refreshed successfully');\n          return api(originalRequest);\n        } else {\n          console.log('No refresh token found');\n        }\n      } catch (refreshError) {\n        console.log('Token refresh failed:', refreshError);\n        // Refresh token failed, clear tokens but don't redirect immediately\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('refreshToken');\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: async (credentials) => {\n    try {\n      // The backend expects 'email' field, not 'username'\n      const loginData = {\n        email: credentials.username || credentials.email, // Handle both username and email fields\n        password: credentials.password\n      };\n      \n      return await api.post('/api/auth/login/', loginData);\n    } catch (error) {\n      console.error('Login API error:', error);\n      // Instead of throwing, indicate backend is unavailable\n      throw new Error('BACKEND_UNAVAILABLE');\n    }\n  },\n  register: async (userData) => {\n    try {\n      // The backend uses 'registration' endpoint, not 'signup'\n      return await api.post('/api/auth/registration/', userData);\n    } catch (error) {\n      console.error('Register API error:', error);\n      // Instead of throwing, indicate backend is unavailable\n      throw new Error('BACKEND_UNAVAILABLE');\n    }\n  },\n  refreshToken: (refresh) => api.post('/api/auth/token/refresh/', { refresh }),\n  getProfile: () => {\n    // Check if user is mock user\n    const userData = localStorage.getItem('user_data');\n    if (userData) {\n      try {\n        const user = JSON.parse(userData);\n        if (user.isMockUser || user.token?.startsWith('mock_token_')) {\n          // Return mock profile data\n          return Promise.resolve({ data: user });\n        }\n      } catch (e) {\n        // Continue with API call if parsing fails\n      }\n    }\n    return api.get('/api/auth/profile/');\n  },\n  updateProfile: (profileData) => {\n    // Check if user is mock user\n    const userData = localStorage.getItem('user_data');\n    if (userData) {\n      try {\n        const user = JSON.parse(userData);\n        if (user.isMockUser || user.token?.startsWith('mock_token_')) {\n          // Return mock success response\n          return Promise.resolve({ \n            data: { \n              user: { ...user, ...profileData },\n              message: 'Profile updated successfully' \n            } \n          });\n        }\n      } catch (e) {\n        // Continue with API call if parsing fails\n      }\n    }\n    return api.post('/api/auth/profile/update/', profileData);\n  },\n};\n\n// Meals API\nexport const mealsAPI = {\n  getAll: (search = '') => api.get(`/api/meals/${search ? `?search=${search}` : ''}`),\n  getById: (id) => api.get(`/api/meals/${id}/`),\n};\n\n// Delivery API\nexport const deliveryAPI = {\n  getTypes: () => api.get('/api/delivery-types/'),\n  getLocations: () => api.get('/api/locations/'),\n};\n\n// Cart API\nexport const cartAPI = {\n  get: async () => {\n    try {\n      // Check if user is mock user first\n      const userData = localStorage.getItem('user_data');\n      if (userData) {\n        try {\n          const user = JSON.parse(userData);\n          if (user.isMockUser || user.token?.startsWith('mock_token_')) {\n            console.log('Mock user detected - returning local cart data');\n            const cartData = localStorage.getItem('localCart') || '{\"items\": [], \"total_amount\": 0}';\n            return Promise.resolve({ data: JSON.parse(cartData) });\n          }\n        } catch (e) {\n          // Continue with API call if parsing fails\n        }\n      }\n      \n      return await api.get('/api/cart/');\n    } catch (error) {\n      console.error('Cart get API error:', error);\n      // Return mock cart data if API fails\n      const cartData = localStorage.getItem('localCart') || '{\"items\": [], \"total_amount\": 0}';\n      return Promise.resolve({ data: JSON.parse(cartData) });\n    }\n  },\n  add: async (item) => {\n    try {\n      // Check if user is mock user first\n      const userData = localStorage.getItem('user_data');\n      if (userData) {\n        try {\n          const user = JSON.parse(userData);\n          if (user.isMockUser || user.token?.startsWith('mock_token_')) {\n            console.log('Mock user detected - skipping cart API call');\n            throw new Error('BACKEND_UNAVAILABLE');\n          }\n        } catch (e) {\n          // Continue with API call if parsing fails\n        }\n      }\n      \n      return await api.post('/api/cart/', item);\n    } catch (error) {\n      console.error('Cart add API error:', error);\n      // Indicate backend is unavailable for cart operations\n      throw new Error('BACKEND_UNAVAILABLE');\n    }\n  },\n  update: async (itemId, item) => {\n    try {\n      // Check if user is mock user first\n      const userData = localStorage.getItem('user_data');\n      if (userData) {\n        try {\n          const user = JSON.parse(userData);\n          if (user.isMockUser || user.token?.startsWith('mock_token_')) {\n            console.log('Mock user detected - skipping cart API call');\n            throw new Error('BACKEND_UNAVAILABLE');\n          }\n        } catch (e) {\n          // Continue with API call if parsing fails\n        }\n      }\n      \n      return await api.put(`/api/cart/${itemId}/`, item);\n    } catch (error) {\n      console.error('Cart update API error:', error);\n      // Indicate backend is unavailable for cart operations\n      throw new Error('BACKEND_UNAVAILABLE');\n    }\n  },\n  remove: async (itemId) => {\n    try {\n      // Check if user is mock user first\n      const userData = localStorage.getItem('user_data');\n      if (userData) {\n        try {\n          const user = JSON.parse(userData);\n          if (user.isMockUser || user.token?.startsWith('mock_token_')) {\n            console.log('Mock user detected - skipping cart API call');\n            throw new Error('BACKEND_UNAVAILABLE');\n          }\n        } catch (e) {\n          // Continue with API call if parsing fails\n        }\n      }\n      \n      return await api.delete(`/api/cart/${itemId}/`);\n    } catch (error) {\n      console.error('Cart remove API error:', error);\n      // Indicate backend is unavailable for cart operations\n      throw new Error('BACKEND_UNAVAILABLE');\n    }\n  },\n};\n\n// Orders API\nexport const ordersAPI = {\n  getAll: () => api.get('/api/orders/'),\n  getById: (id) => api.get(`/api/orders/${id}/`),\n  create: (order) => api.post('/api/orders/', order),\n};\n\n// Dynamic Data Management\nexport const dynamicDataAPI = {\n  // Update sample meals dynamically (for when backend is not available)\n  updateSampleMeals: (meals) => {\n    localStorage.setItem('sampleMeals', JSON.stringify(meals));\n  },\n  \n  // Get sample meals from localStorage\n  getSampleMeals: () => {\n    const stored = localStorage.getItem('sampleMeals');\n    return stored ? JSON.parse(stored) : null;\n  },\n  \n  // Update delivery locations dynamically\n  updateDeliveryLocations: (locations) => {\n    localStorage.setItem('deliveryLocations', JSON.stringify(locations));\n  },\n  \n  // Get delivery locations from localStorage\n  getDeliveryLocations: () => {\n    const stored = localStorage.getItem('deliveryLocations');\n    return stored ? JSON.parse(stored) : null;\n  },\n  \n  // Update fees dynamically\n  updateFees: (fees) => {\n    localStorage.setItem('deliveryFees', JSON.stringify(fees));\n  },\n  \n  // Get fees from localStorage\n  getFees: () => {\n    const stored = localStorage.getItem('deliveryFees');\n    return stored ? JSON.parse(stored) : null;\n  }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}