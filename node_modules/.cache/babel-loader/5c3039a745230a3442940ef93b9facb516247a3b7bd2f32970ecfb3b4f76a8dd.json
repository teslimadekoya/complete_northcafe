{"ast":null,"code":"var _jsxFileName = \"/Users/teslimadekoya/Desktop/frontend copy/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const token = localStorage.getItem('access_token');\n    const userData = localStorage.getItem('user_data');\n    if (token && userData) {\n      try {\n        const user = JSON.parse(userData);\n        setUser(user);\n\n        // Ensure the user is also stored locally for fallback authentication\n        const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n        const existingUserIndex = storedUsers.findIndex(u => u.email === user.email);\n        if (existingUserIndex === -1) {\n          var _user$email;\n          // User not in local storage, add them\n          storedUsers.push({\n            username: user.username || ((_user$email = user.email) === null || _user$email === void 0 ? void 0 : _user$email.split('@')[0]),\n            email: user.email,\n            password: 'unknown',\n            // We don't have the password, but this is for fallback\n            id: user.id || Date.now(),\n            isMockUser: false\n          });\n          localStorage.setItem('mock_users', JSON.stringify(storedUsers));\n          console.log('Synced current user to local storage:', user);\n          console.log('Updated stored users:', storedUsers);\n        }\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('user_data');\n      }\n    }\n\n    // Create a default test user if no users exist\n    const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n    if (storedUsers.length === 0) {\n      const defaultUser = {\n        username: 'admin',\n        email: 'admin@gmail.com',\n        password: 'admin123',\n        id: Date.now(),\n        isMockUser: true\n      };\n      localStorage.setItem('mock_users', JSON.stringify([defaultUser]));\n      console.log('Created default test user:', defaultUser);\n    }\n\n    // Debug: List stored users\n    const updatedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n    if (updatedUsers.length > 0) {\n      console.log('Stored users on app start:', updatedUsers);\n    } else {\n      console.log('No stored users found on app start');\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Try backend first\n      const response = await authAPI.login({\n        username: email,\n        password\n      });\n      const {\n        access,\n        refresh,\n        user\n      } = response.data;\n      localStorage.setItem('access_token', access);\n      localStorage.setItem('refresh_token', refresh);\n      const userData = {\n        ...user,\n        // Use the user data from backend response\n        token: access,\n        id: user.id || Date.now()\n      };\n      localStorage.setItem('user_data', JSON.stringify(userData));\n      setUser(userData);\n\n      // Also store the user locally for fallback authentication\n      const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n      const existingUserIndex = storedUsers.findIndex(u => u.email === email);\n      if (existingUserIndex !== -1) {\n        var _user$email2;\n        // Update existing user\n        storedUsers[existingUserIndex] = {\n          ...storedUsers[existingUserIndex],\n          username: user.username || ((_user$email2 = user.email) === null || _user$email2 === void 0 ? void 0 : _user$email2.split('@')[0]),\n          email: user.email,\n          password: password // Store the password for local authentication\n        };\n      } else {\n        var _user$email3;\n        // Add new user\n        storedUsers.push({\n          username: user.username || ((_user$email3 = user.email) === null || _user$email3 === void 0 ? void 0 : _user$email3.split('@')[0]),\n          email: user.email,\n          password: password,\n          id: user.id || Date.now(),\n          isMockUser: false // This is a real backend user\n        });\n      }\n      localStorage.setItem('mock_users', JSON.stringify(storedUsers));\n      console.log('User logged in via backend and stored locally:', userData);\n      console.log('Updated stored users:', storedUsers);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Backend login failed, trying fallback:', error);\n\n      // Check if backend is unavailable\n      if (error.message === 'BACKEND_UNAVAILABLE') {\n        console.log('Backend unavailable, using local authentication');\n      }\n\n      // Check if this is a valid user in our local storage\n      const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n      console.log('Attempting login with:', {\n        email,\n        password\n      });\n      console.log('Available stored users:', storedUsers);\n      const user = storedUsers.find(u => (u.email === email || u.username === email) && u.password === password);\n      if (!user) {\n        console.log('Login failed: Invalid credentials for', email);\n        console.log('Stored users:', storedUsers);\n        if (storedUsers.length === 0) {\n          throw new Error('No users registered yet. Please register first to create an account.');\n        } else {\n          // Check if email exists but password is wrong\n          const userWithEmail = storedUsers.find(u => u.email === email || u.username === email);\n          if (userWithEmail) {\n            throw new Error('PASSWORD_INCORRECT');\n          } else {\n            throw new Error('EMAIL_NOT_FOUND');\n          }\n        }\n      }\n      console.log('Found matching user:', user);\n\n      // Create a mock user for testing\n      const userData = {\n        ...user,\n        // Preserve all user data including any updated fields\n        token: 'mock_token_' + Date.now(),\n        isMockUser: true\n      };\n      localStorage.setItem('access_token', userData.token);\n      localStorage.setItem('user_data', JSON.stringify(userData));\n      setUser(userData);\n      return {\n        success: true\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      // Try backend first\n      const response = await authAPI.register(userData);\n\n      // If backend registration is successful, also log the user in\n      if (response.data) {\n        const {\n          access,\n          refresh,\n          user\n        } = response.data;\n\n        // Store tokens\n        localStorage.setItem('access_token', access);\n        localStorage.setItem('refresh_token', refresh);\n\n        // Store user data\n        const userDataToStore = {\n          ...user,\n          token: access,\n          id: user.id || Date.now()\n        };\n        localStorage.setItem('user_data', JSON.stringify(userDataToStore));\n        setUser(userDataToStore);\n\n        // Also store the user locally for fallback authentication\n        const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n        const existingUserIndex = storedUsers.findIndex(u => u.email === userData.email);\n        if (existingUserIndex !== -1) {\n          // Update existing user\n          storedUsers[existingUserIndex] = {\n            ...storedUsers[existingUserIndex],\n            username: user.username || userData.username,\n            email: user.email,\n            password: userData.password // Store the password for local authentication\n          };\n        } else {\n          // Add new user\n          storedUsers.push({\n            username: user.username || userData.username,\n            email: user.email,\n            password: userData.password,\n            id: user.id || Date.now(),\n            isMockUser: false // This is a real backend user\n          });\n        }\n        localStorage.setItem('mock_users', JSON.stringify(storedUsers));\n        console.log('User registered via backend and stored locally:', userDataToStore);\n        console.log('Updated stored users:', storedUsers);\n        return {\n          success: true\n        };\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Backend registration failed, using fallback:', error);\n\n      // Check if backend is unavailable\n      if (error.message === 'BACKEND_UNAVAILABLE') {\n        console.log('Backend unavailable, using local registration');\n      }\n\n      // Fallback: Store user data locally for testing\n      const mockUser = {\n        username: userData.username,\n        email: userData.email,\n        password: userData.password,\n        // Store password for local authentication\n        id: Date.now(),\n        isMockUser: true\n      };\n\n      // Store in localStorage for demo purposes\n      const existingUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n\n      // Check if user already exists\n      const existingUser = existingUsers.find(u => u.email === userData.email || u.username === userData.username);\n      if (existingUser) {\n        throw new Error('User already exists with this email or username');\n      }\n      existingUsers.push(mockUser);\n      localStorage.setItem('mock_users', JSON.stringify(existingUsers));\n\n      // Automatically log the user in after successful local registration\n      const userDataToStore = {\n        email: mockUser.email,\n        username: mockUser.username,\n        token: 'mock_token_' + Date.now(),\n        id: mockUser.id,\n        isMockUser: true\n      };\n      localStorage.setItem('access_token', userDataToStore.token);\n      localStorage.setItem('user_data', JSON.stringify(userDataToStore));\n      setUser(userDataToStore);\n      console.log('User registered and logged in locally:', mockUser);\n      console.log('All stored users:', existingUsers);\n      return {\n        success: true\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user_data');\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n  const updateUser = userData => {\n    setUser(userData);\n    localStorage.setItem('user_data', JSON.stringify(userData));\n    localStorage.setItem('user', JSON.stringify(userData));\n\n    // If this is a mock user, update the stored credentials\n    if (userData.isMockUser) {\n      const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n      const userIndex = storedUsers.findIndex(u => u.id === userData.id);\n      if (userIndex !== -1) {\n        // Update the stored user with all user data (except token and isMockUser)\n        const {\n          token,\n          isMockUser,\n          ...credentialsToUpdate\n        } = userData;\n        storedUsers[userIndex] = {\n          ...storedUsers[userIndex],\n          ...credentialsToUpdate\n        };\n        localStorage.setItem('mock_users', JSON.stringify(storedUsers));\n        console.log('Stored credentials updated for user:', userData.id, 'New credentials:', credentialsToUpdate);\n      }\n    }\n  };\n  const updateCredentials = (userId, newCredentials) => {\n    // Update stored credentials for local authentication\n    const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n    console.log('updateCredentials called with:', {\n      userId,\n      newCredentials\n    });\n    console.log('Current stored users:', storedUsers);\n    const userIndex = storedUsers.findIndex(u => u.id === userId);\n    console.log('Found user at index:', userIndex);\n    if (userIndex !== -1) {\n      const oldUser = storedUsers[userIndex];\n      storedUsers[userIndex] = {\n        ...storedUsers[userIndex],\n        ...newCredentials\n      };\n      localStorage.setItem('mock_users', JSON.stringify(storedUsers));\n      console.log('Credentials updated for user:', userId);\n      console.log('Old user data:', oldUser);\n      console.log('New user data:', storedUsers[userIndex]);\n      console.log('Updated stored users:', storedUsers);\n    } else {\n      console.log('User not found in stored users for ID:', userId);\n    }\n  };\n  const getStoredCredentials = () => {\n    // Helper function to check stored credentials (for debugging)\n    return JSON.parse(localStorage.getItem('mock_users') || '[]');\n  };\n  const listStoredUsers = () => {\n    // Helper function to list all stored users (for debugging)\n    const users = getStoredCredentials();\n    console.log('=== STORED USERS ===');\n    users.forEach((user, index) => {\n      console.log(`${index + 1}. Email: ${user.email}, Username: ${user.username}, ID: ${user.id}`);\n    });\n    console.log('====================');\n    return users;\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    updateUser,\n    updateCredentials,\n    getStoredCredentials,\n    listStoredUsers,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","userData","JSON","parse","storedUsers","existingUserIndex","findIndex","u","email","_user$email","push","username","split","password","id","Date","now","isMockUser","setItem","stringify","console","log","error","removeItem","length","defaultUser","updatedUsers","login","response","access","refresh","data","_user$email2","_user$email3","success","message","find","userWithEmail","register","userDataToStore","mockUser","existingUsers","existingUser","logout","updateUser","userIndex","credentialsToUpdate","updateCredentials","userId","newCredentials","oldUser","getStoredCredentials","listStoredUsers","users","forEach","index","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/teslimadekoya/Desktop/frontend copy/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const token = localStorage.getItem('access_token');\n    const userData = localStorage.getItem('user_data');\n    \n    if (token && userData) {\n      try {\n        const user = JSON.parse(userData);\n        setUser(user);\n        \n        // Ensure the user is also stored locally for fallback authentication\n        const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n        const existingUserIndex = storedUsers.findIndex(u => u.email === user.email);\n        \n        if (existingUserIndex === -1) {\n          // User not in local storage, add them\n          storedUsers.push({\n            username: user.username || user.email?.split('@')[0],\n            email: user.email,\n            password: 'unknown', // We don't have the password, but this is for fallback\n            id: user.id || Date.now(),\n            isMockUser: false\n          });\n          localStorage.setItem('mock_users', JSON.stringify(storedUsers));\n          console.log('Synced current user to local storage:', user);\n          console.log('Updated stored users:', storedUsers);\n        }\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('user_data');\n      }\n    }\n    \n    // Create a default test user if no users exist\n    const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n    if (storedUsers.length === 0) {\n      const defaultUser = {\n        username: 'admin',\n        email: 'admin@gmail.com',\n        password: 'admin123',\n        id: Date.now(),\n        isMockUser: true\n      };\n      localStorage.setItem('mock_users', JSON.stringify([defaultUser]));\n      console.log('Created default test user:', defaultUser);\n    }\n    \n    // Debug: List stored users\n    const updatedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n    if (updatedUsers.length > 0) {\n      console.log('Stored users on app start:', updatedUsers);\n    } else {\n      console.log('No stored users found on app start');\n    }\n    \n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      // Try backend first\n      const response = await authAPI.login({ username: email, password });\n      const { access, refresh, user } = response.data;\n      \n      localStorage.setItem('access_token', access);\n      localStorage.setItem('refresh_token', refresh);\n      \n      const userData = { \n        ...user, // Use the user data from backend response\n        token: access,\n        id: user.id || Date.now()\n      };\n      localStorage.setItem('user_data', JSON.stringify(userData));\n      setUser(userData);\n      \n      // Also store the user locally for fallback authentication\n      const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n      const existingUserIndex = storedUsers.findIndex(u => u.email === email);\n      \n      if (existingUserIndex !== -1) {\n        // Update existing user\n        storedUsers[existingUserIndex] = {\n          ...storedUsers[existingUserIndex],\n          username: user.username || user.email?.split('@')[0],\n          email: user.email,\n          password: password // Store the password for local authentication\n        };\n      } else {\n        // Add new user\n        storedUsers.push({\n          username: user.username || user.email?.split('@')[0],\n          email: user.email,\n          password: password,\n          id: user.id || Date.now(),\n          isMockUser: false // This is a real backend user\n        });\n      }\n      \n      localStorage.setItem('mock_users', JSON.stringify(storedUsers));\n      console.log('User logged in via backend and stored locally:', userData);\n      console.log('Updated stored users:', storedUsers);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Backend login failed, trying fallback:', error);\n      \n      // Check if backend is unavailable\n      if (error.message === 'BACKEND_UNAVAILABLE') {\n        console.log('Backend unavailable, using local authentication');\n      }\n      \n      // Check if this is a valid user in our local storage\n      const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n      console.log('Attempting login with:', { email, password });\n      console.log('Available stored users:', storedUsers);\n      \n      const user = storedUsers.find(u => \n        (u.email === email || u.username === email) && \n        u.password === password\n      );\n      \n      if (!user) {\n        console.log('Login failed: Invalid credentials for', email);\n        console.log('Stored users:', storedUsers);\n        \n        if (storedUsers.length === 0) {\n          throw new Error('No users registered yet. Please register first to create an account.');\n        } else {\n          // Check if email exists but password is wrong\n          const userWithEmail = storedUsers.find(u => u.email === email || u.username === email);\n          if (userWithEmail) {\n            throw new Error('PASSWORD_INCORRECT');\n          } else {\n            throw new Error('EMAIL_NOT_FOUND');\n          }\n        }\n      }\n      \n      console.log('Found matching user:', user);\n      \n      // Create a mock user for testing\n      const userData = { \n        ...user, // Preserve all user data including any updated fields\n        token: 'mock_token_' + Date.now(),\n        isMockUser: true\n      };\n      \n      localStorage.setItem('access_token', userData.token);\n      localStorage.setItem('user_data', JSON.stringify(userData));\n      setUser(userData);\n      \n      return { success: true };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      // Try backend first\n      const response = await authAPI.register(userData);\n      \n      // If backend registration is successful, also log the user in\n      if (response.data) {\n        const { access, refresh, user } = response.data;\n        \n        // Store tokens\n        localStorage.setItem('access_token', access);\n        localStorage.setItem('refresh_token', refresh);\n        \n        // Store user data\n        const userDataToStore = { \n          ...user,\n          token: access,\n          id: user.id || Date.now()\n        };\n        localStorage.setItem('user_data', JSON.stringify(userDataToStore));\n        setUser(userDataToStore);\n        \n        // Also store the user locally for fallback authentication\n        const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n        const existingUserIndex = storedUsers.findIndex(u => u.email === userData.email);\n        \n        if (existingUserIndex !== -1) {\n          // Update existing user\n          storedUsers[existingUserIndex] = {\n            ...storedUsers[existingUserIndex],\n            username: user.username || userData.username,\n            email: user.email,\n            password: userData.password // Store the password for local authentication\n          };\n        } else {\n          // Add new user\n          storedUsers.push({\n            username: user.username || userData.username,\n            email: user.email,\n            password: userData.password,\n            id: user.id || Date.now(),\n            isMockUser: false // This is a real backend user\n          });\n        }\n        \n        localStorage.setItem('mock_users', JSON.stringify(storedUsers));\n        console.log('User registered via backend and stored locally:', userDataToStore);\n        console.log('Updated stored users:', storedUsers);\n        \n        return { success: true };\n      }\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Backend registration failed, using fallback:', error);\n      \n      // Check if backend is unavailable\n      if (error.message === 'BACKEND_UNAVAILABLE') {\n        console.log('Backend unavailable, using local registration');\n      }\n      \n      // Fallback: Store user data locally for testing\n      const mockUser = {\n        username: userData.username,\n        email: userData.email,\n        password: userData.password, // Store password for local authentication\n        id: Date.now(),\n        isMockUser: true\n      };\n      \n      // Store in localStorage for demo purposes\n      const existingUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n      \n      // Check if user already exists\n      const existingUser = existingUsers.find(u => \n        u.email === userData.email || u.username === userData.username\n      );\n      \n      if (existingUser) {\n        throw new Error('User already exists with this email or username');\n      }\n      \n      existingUsers.push(mockUser);\n      localStorage.setItem('mock_users', JSON.stringify(existingUsers));\n      \n      // Automatically log the user in after successful local registration\n      const userDataToStore = { \n        email: mockUser.email,\n        username: mockUser.username,\n        token: 'mock_token_' + Date.now(),\n        id: mockUser.id,\n        isMockUser: true\n      };\n      \n      localStorage.setItem('access_token', userDataToStore.token);\n      localStorage.setItem('user_data', JSON.stringify(userDataToStore));\n      setUser(userDataToStore);\n      \n      console.log('User registered and logged in locally:', mockUser);\n      console.log('All stored users:', existingUsers);\n      \n      return { success: true };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user_data');\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n\n  const updateUser = (userData) => {\n    setUser(userData);\n    localStorage.setItem('user_data', JSON.stringify(userData));\n    localStorage.setItem('user', JSON.stringify(userData));\n    \n    // If this is a mock user, update the stored credentials\n    if (userData.isMockUser) {\n      const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n      const userIndex = storedUsers.findIndex(u => u.id === userData.id);\n      \n      if (userIndex !== -1) {\n        // Update the stored user with all user data (except token and isMockUser)\n        const { token, isMockUser, ...credentialsToUpdate } = userData;\n        storedUsers[userIndex] = {\n          ...storedUsers[userIndex],\n          ...credentialsToUpdate\n        };\n        localStorage.setItem('mock_users', JSON.stringify(storedUsers));\n        console.log('Stored credentials updated for user:', userData.id, 'New credentials:', credentialsToUpdate);\n      }\n    }\n  };\n\n  const updateCredentials = (userId, newCredentials) => {\n    // Update stored credentials for local authentication\n    const storedUsers = JSON.parse(localStorage.getItem('mock_users') || '[]');\n    console.log('updateCredentials called with:', { userId, newCredentials });\n    console.log('Current stored users:', storedUsers);\n    \n    const userIndex = storedUsers.findIndex(u => u.id === userId);\n    console.log('Found user at index:', userIndex);\n    \n    if (userIndex !== -1) {\n      const oldUser = storedUsers[userIndex];\n      storedUsers[userIndex] = {\n        ...storedUsers[userIndex],\n        ...newCredentials\n      };\n      localStorage.setItem('mock_users', JSON.stringify(storedUsers));\n      console.log('Credentials updated for user:', userId);\n      console.log('Old user data:', oldUser);\n      console.log('New user data:', storedUsers[userIndex]);\n      console.log('Updated stored users:', storedUsers);\n    } else {\n      console.log('User not found in stored users for ID:', userId);\n    }\n  };\n\n  const getStoredCredentials = () => {\n    // Helper function to check stored credentials (for debugging)\n    return JSON.parse(localStorage.getItem('mock_users') || '[]');\n  };\n\n  const listStoredUsers = () => {\n    // Helper function to list all stored users (for debugging)\n    const users = getStoredCredentials();\n    console.log('=== STORED USERS ===');\n    users.forEach((user, index) => {\n      console.log(`${index + 1}. Email: ${user.email}, Username: ${user.username}, ID: ${user.id}`);\n    });\n    console.log('====================');\n    return users;\n  };\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    updateUser,\n    updateCredentials,\n    getStoredCredentials,\n    listStoredUsers,\n    loading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}